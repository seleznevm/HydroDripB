#define topic_espTime "smadripsystem/espTime"
#define topic_status "smadripsystem/status"
#define topic_status_pump "smadripsystem/pump"
#define topic_status_light "smadripsystem/light"
#define topic_status_compressor "smadripsystem/compressor"
#define topic_status_waterlevel "smadripsystem/waterlevel"
// define settings topics:
#define topic_settings_drip_start_h "smadripsystem/settings/drip_start_h"
#define topic_settings_drip_start_m "smadripsystem/settings/drip_start_m"
#define topic_settings_drip_stop_h "smadripsystem/settings/drip_stop_h"
#define topic_settings_drip_stop_m "smadripsystem/settings/drip_stop_m"
#define topic_settings_lightON_h "smadripsystem/settings/lightON_h"
#define topic_settings_lightOFF_h "smadripsystem/settings/lightOFF_h"
#define topic_settings_pumpONtime_m "smadripsystem/settings/pumpONtime_m"

#include <string>
#include <pinDefinition.h>
#include <structs.h>
#include <AsyncMqttClient.h>

using namespace std;

AsyncMqttClient mqttClient;
tm LocalTime();
extern tm timeinfo;
extern programm current_set;

void mqttflow_telemetrySend();
void mqttPublishDIO(const char*, int);
int mqttflow_getAppSettings(programm*);

void mqttflow_telemetrySend()
{
    if (!mqttClient.connected())
        mqttClient.connect();
    timeinfo = LocalTime();
    string time_h = to_string(timeinfo.tm_hour); // use to_string and c_string to convert int to c type string
    string time_m = to_string(timeinfo.tm_min);
    string time;
    time = time_h + ':' + time_m;
    const char* msg = time.c_str();
    mqttClient.publish(topic_espTime, 0, 1, msg); // send time
    mqttPublishDIO(topic_status_pump, PUMP_PIN); // send pump status
    mqttPublishDIO(topic_status_light, LIGHT_PIN); 
    mqttPublishDIO(topic_status_compressor, COMPRESSOR_PIN); 
    mqttPublishDIO(topic_status_waterlevel, WATER_LEVEL_PIN);
}

void mqttPublishDIO(const char* topic, int pin)
{
    string value = to_string(digitalRead(pin)); 
    const char* msg = value.c_str();
    mqttClient.publish(topic, 0, 1, msg);
}

int mqttflow_getAppSettings(programm* current_set)
{
    current_set->drip_start_h = mqttClient.subscribe(topic_settings_drip_start_h, 0);
    current_set->drip_start_m = mqttClient.subscribe(topic_settings_drip_start_m, 0);
    return 0;
}